<!DOCTYPE html>
<html>
    <head>
        <link href='/css/roboto.css' rel="stylesheet" type="text/css">
        <link href='/css/icons.css' rel="stylesheet" type="text/css">
        <link href="/css/vuetify.min.css" rel="stylesheet">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
    </head>
    <body>
        <div id="app">
            <v-app dark id="inspire">
                <v-navigation-drawer
                fixed
                :clipped="$vuetify.breakpoint.mdAndUp"
                app
                v-model="drawer"
                class="secondary"
                >
                    <v-list>
                        <v-list-tile @click="switchComponent('mainPage')">
									 <v-list-tile-action>
                            <v-icon>home</v-icon>
                            </v-list-tile-action>
                            <v-list-tile-content>
                            <v-list-tile-title>Home</v-list-tile-title>
                            </v-list-tile-content>
                         </v-list-tile>
                        <v-list-group
                        v-model="item.active"
                        v-for="item in navitems"
                        :key="item.title"
                        :prepend-icon="item.action"
                        no-action
                        >
                        <v-list-tile slot="activator">
                            <v-list-tile-content>
                            <v-list-tile-title>{{ item.title }}</v-list-tile-title>
                            </v-list-tile-content>
                        </v-list-tile>
                        <v-list-tile v-for="subItem in item.navitems" :key="subItem.title" @click="switchComponent(subItem.href)">
                            <v-list-tile-content>
                            <v-list-tile-title>{{ subItem.title }}</v-list-tile-title>
                            </v-list-tile-content>
                            <v-list-tile-action>
                            <v-icon>{{ subItem.action }}</v-icon>
                            </v-list-tile-action>
                        </v-list-tile>
                        </v-list-group>
                    </v-list>
                </v-navigation-drawer>
                <v-toolbar
                color="primary"
                dark
                app
                :clipped-left="$vuetify.breakpoint.mdAndUp"
                fixed
                >
                    <v-toolbar-title style="width: 300px" class="ml-0 pl-3">
                        <v-toolbar-side-icon @click.stop="drawer = !drawer"></v-toolbar-side-icon>
                        <span class="hidden-sm-and-down">
                            <v-btn flat large>
                                <v-avatar size="92px" tile>
                                <img
                                    src="/images/POTLOGOWHITE.svg"
                                    alt="Process Of Things"
                                >
                                </v-avatar>
                            </v-btn>
                        </span>
                    </v-toolbar-title>
                    <v-text-field
                        flat
                        solo-inverted
                        prepend-icon="search"
                        label="Search"
                        class="hidden-sm-and-down"
                    ></v-text-field>
                    <v-spacer></v-spacer>
                    <v-btn icon>
                        <v-icon>apps</v-icon>
                    </v-btn>
                    <v-btn icon>
                        <v-icon>notifications</v-icon>
                    </v-btn>
                </v-toolbar>
                <v-content>
                       
                        <component :is="currentView" keep-alive></component>
   
                </v-content>
            </v-app>
        </div>

        <script src="/js/vue-2.5.16.js"></script>
        <script src="/js/vuetify.js"></script>
        <script src="/js/http-vue-loader.js"></script>
        <script src="https://unpkg.com/vuex@3.0.1/dist/vuex.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.js"></script>
        <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
        <script src="/js/axios.min.js"></script>
        
        <script>
//            import axios as axios;
        
//            const instance = axios.create({
//                baseURL: 'http://127.0.0.1:9090/v1/api'
//            });

            const theme = {
                primary: '#2d325a',
                secondary: '#304b78',
                accent: '#56bda2',
                error: '#dbb13b',
                warning: '#dbb13b'
            }
 
 
            const store = new Vuex.Store({
					strict: true,
					modules: {
						main: {
							namespaced: true,
							
							state: {
								count: 0,
								pong: '',
								status: ''
//								loadedNavitems: [{"action":"code","navitems":[{"title":"Create App"},{"title":"Your Apps"}],"title":"D1eveloper"},{"action":"explore","navitems":[{"href":"explore","title":"Blockchains"},{"href":"my-										component","title":"Node"},{"title":"Permissions"},{"title":"View Stream"}],"title":"Explore"}]
							},
							mutations: {
//								TODO : Find away to use a single manipulation to store the data
//								storeChannelData (state, channel, data) {
//									state.channel = data
//								},
								pongStore (state, data) {
									state.pong = data
								},
								statusStore (state, data) {
									state.status = data
								}
							},
							actions: {
								storeChannelData (context, payload) {
										context.commit(payload.channel+'Store', payload.data)
								},
								loadBlockChainStatus (context) {
                                    axios.get('/v1/api/multichain/blockchainStatus')
                                    .then(res => {
                                        console.log(res.data)
                                        context.commit('statusStore', res.data)
                                    })
                                    .catch(function (error) {
                                        console.log(error)
                                    })
                                }
							},
							getters: {
									loadedNavitems (state) {
										return state.loadedNavitems
									},
									getStatus (state) {
										return state.status
									},
									getPong (state) {
										return state.pong
									}
							}	
						}
					}
				})
				
				const socket = new WebSocket("ws://127.0.0.1:9090/wsapi")
				
				setInterval(() => {
					socket.send(
						JSON.stringify({'channel' : "ping",'data' : {}})
					)
				}, 3000)
				
				    
            new Vue({ 
                el: '#app',
                data: {
                    currentView: "mainPage",
                    drawer: null,
                    navitems: [],
                    messages: [],
                    dom: ''
                },
                store,
                computed: {
						navitems () {
							return this.$store.getters.loadedNavitems 
						}
                },
                components: {
						<%== $import_components %>
                },
                methods: {
                    switchComponent: function(compName){
                        console.log(compName);
                        this.currentView = compName;
                        this.dialog = true;
                    }
                },
					created() {
							socket.onopen = e => {
									socket.send(
										JSON.stringify({'channel' : "status",'data' : {}})
									);
							};
							
							socket.onmessage = e => {
					        let data = JSON.parse(e.data);
					         console.log(data)
								this.$store.dispatch('main/storeChannelData',data)
							};

							this.$store.getters.getStatus
							
                    this.$vuetify.theme = theme
                    fetch('/nav')
                    .then(response => response.json())
                    .then(json => {
                        this.navitems = json.navitems
                    })
                    
                    this.$store.dispatch('main/loadBlockChainStatus')
                },
					beforeDestroy(){
						socket.$off("message", this.handleMessage)
					},
                props: {
                    source: String
                }
            })


        </script>
    </body>
</html>
