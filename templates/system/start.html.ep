<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" href="./css/roboto.min.css">
		<link rel="stylesheet" href="./css/material-icons.css">
		<link href="./css/vuetify.min.css" rel="stylesheet">
		<link rel="stylesheet" href="./css/font-awesome.min.css">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
	</head>
	<body>
		<div id="app">
			<v-app
				id="inspire"
				dark
			>	
				<v-navigation-drawer
					v-model="drawer"
					class="secondary"
					fixed
					clipped
					app
				>
					<v-list dense>
						<v-list-tile v-for="item in items" :key="item.text" @click="switchComponent(item.com)">
							<v-list-tile-action>
								<v-icon>{{ item.icon }}</v-icon>
							</v-list-tile-action>
							<v-list-tile-content>
								<v-list-tile-title>
									{{ item.text }}
								</v-list-tile-title>
							</v-list-tile-content>
						</v-list-tile>
					</v-list>
				</v-navigation-drawer>
				<v-toolbar
					color="primary"
					dense
					fixed
					clipped-left
					app
				>
					<v-toolbar-side-icon @click.stop="drawer = !drawer"></v-toolbar-side-icon>
					<v-avatar size="60px" tile>
															<img
																	src="/images/POTLOGOWHITE.svg"
																	alt="Process Of Things"
															>
					</v-avatar>
					<v-spacer></v-spacer>
					<v-layout row align-center style="max-width: 650px">
						<v-text-field
							:append-icon-cb="() => {}"
							placeholder="Search..."
							single-line
							append-icon="search"
							color="white"
							hide-details
						></v-text-field>
					</v-layout>
				</v-toolbar>
				<v-content>
					<component :is="currentView" keep-alive></component>
				</v-content>
			</v-app>
    </div>

		<script src="/js/vue.js"></script>
		<script src="/js/vuetify.js"></script>
		<script src="https://unpkg.com/http-vue-loader@1.3.5/src/httpVueLoader.js"></script>
		<script src="/js/vuex-3.0.1.js"></script>
		<script src="/js/axios.min.js"></script>

		<script>

			const theme = {
					primary: '#2d325a',
					secondary: '#304b78',
					accent: '#56bda2',
					error: '#dbb13b',
					warning: '#dbb13b'
			}
			
			const store = new Vuex.Store({
				strict: true,
				modules: {
					main: {
						namespaced: true,
						state: {
							count: 0,
							pong: '',
							status: '',
							wsMsg: ''
		//								loadedNavitems: [{"action":"code","navitems":[{"title":"Create App"},{"title":"Your Apps"}],"title":"Developer"},{"action":"explore","navitems":[{"href":"explore","title":"Blockchains"},{"href":"my-component","title":"Node"},{"title":"Permissions"},{"title":"View Stream"}],"title":"Explore"}]
						},
						mutations: {
		//								TODO : Find away to use a single manipulation to store the data
		//								storeChannelData (state, channel, data) {
		//									state.channel = data
		//								},
							pongStore (state, data) {
								state.pong = data
							},
							statusStore (state, status) {
								state.status = status
							}
						},
						actions: {
							storeChannelData (context, payload) {
								context.commit(payload.channel+'Store', payload.data)
							},
							loadBlockChainStatus (context) {
								axios.get('/v1/api/multichain/blockchainStatus')
								.then(res => {
									let data = JSON.parse(res.data);
									context.commit('statusStore', data)
								})
								.catch(function (error) {
									console.log(error)
								})
							},
							sendMessage (context, payload) {
								ws.send(JSON.stringify({"createApp": {"appName": this.name,
									"appDesc": this.description,
									"appConnect": this.connect,
									"appSending": this.sending,
									"appReceive": this.receive}}))
									
							} 
						},
						getters: {
								loadedNavitems (state) {
									return state.loadedNavitems
								},
								getStatus (state) {
									return state.status
								},
								getPong (state) {
									return state.pong
								}
						}	
					}
				}
			})
						
			const ws = new WebSocket(((window.location.protocol === "https:") ? "wss://" : "ws://") + window.location.host + "/wsapi");

			new Vue({ 
				el: '#app',
				data: {
					ws: null,
					currentView: "mainPage",
					drawer: true,
					navitems: [],
					messages: [],
					dom: '',
					items: [
						{ icon: 'home', text: 'Home', com: 'mainPage'},
						{ icon: 'code', text: 'dApps', com: 'developer'}
					]
//											{ icon: 'person_add', text: 'Invite Device', com: 'inviteDevice'},
				},
				store,
				ws,
				computed: {
					navitems () {
						return this.$store.getters.loadedNavitems 
					}
				},
				components: {
					<%== $import_components %>
				},
				methods: {
					switchComponent: function(compName){
						console.log(compName);
						this.currentView = compName;
						this.dialog = true;
					}
				},
				created() {
					var self = this;
					setInterval(() => {
						ws.send(
							JSON.stringify({'channel' : "ping",'data' : {}})
						)
					}, 3000)

					ws.onopen = e => {
							console.log("Socket Open")
							ws.send(
								JSON.stringify({'channel' : "status",'data' : {}})
							);
					};
						
					ws.onmessage = e => {
							let data = JSON.parse(e.data);
							if (data.channel == 'status') {
								console.log("status channel found")
								this.$store.dispatch('main/loadBlockChainStatus')
							} else {
								self.$store.dispatch('main/storeChannelData',data)
							}
					};
					this.$store.dispatch('main/loadBlockChainStatus')
					this.$store.getters.getStatus
					this.$vuetify.theme = theme
					fetch('/nav')
					.then(response => response.json())
					.then(json => {
							this.navitems = json.navitems
					})
				},
				beforeDestroy(){
		//						socket.$off("message", this.handleMessage)
				},
				props: {
						source: String
				}
			})


		</script>
	</body>
</html>
